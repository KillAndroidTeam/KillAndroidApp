// 混淆资源文件
andResGuard {
    // mappingFile = file("./resource_mapping.txt")
//     mappingFile = file("./resource_mapping.txt")
//    mappingFile = null
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
    fixedResName = "arg"
    // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
    mergeDuplicatedRes = true
    whiteList = [
            // your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for umeng update
            "R.string.umeng*",
            "R.string.UM*",
            "R.string.tb_*",
            "R.string.rc_*",
            "R.layout.umeng*",
            "R.layout.tb_*",
            "R.layout.rc_*",
            "R.drawable.umeng*",
            "R.drawable.tb_*",
            "R.drawable.rc_*",
            "R.drawable.u1*",
            "R.drawable.u2*",
            "R.anim.umeng*",
            "R.color.umeng*",
            "R.color.tb_*",
            "R.color.rc_*",
            "R.style.*UM*",
            "R.style.umeng*",
            "R.style.rc_*",
            "R.id.umeng*",
            "R.id.rc_*",
            // umeng share for sina
            "R.drawable.sina*",
            // for google-services.json
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key",
            "R.dimen.rc_*",
            "R.xml.file_paths",
            "R.drawable.utils_toast_bg",
            "R.layout.utils_toast_view",

            "R.layout.Lm",
            "R.res.Lm",
            "R.xml.Lm",
            "R.drawable.util_*",
            "R.layout.util_*",
            "R.xml.util_*",

//            "R.drawable.default_scroll_handle_*",
//            "R.style.sb_*",
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.21'
        //path = "/usr/local/bin/7za"
    }

    /**
     * 可选： 如果不设置则会默认覆盖assemble输出的apk
     **/
//     finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * 可选: 指定v1签名时生成jar文件的摘要算法
     * 默认值为“SHA-1”
     **/
    // digestalg = "SHA-256"
}

android {
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/pkg_debug.kotlin_module'
        exclude 'META-INF/pkg_release.kotlin_module'

    }
    compileSdkVersion Config.compileSdkVersion
//    compileSdkVersion  build_versions.com_sdk
    buildToolsVersion Config.build_tools
    defaultConfig {
        applicationId Config.applicationId
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName
        multiDexEnabled true
        consumerProguardFiles 'consumer-rules.pro'
//        ndk {
//            abiFilters "armeabi-v7a"
//        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }
    //签名配置
    signingConfigs {
        debugConfig {
            keyAlias "note"
            keyPassword "qwertyuiop"
//            storeFile file("../key")
            storeFile file(project.getRootDir().absolutePath+"/key.jks")

            storePassword "qwertyuiop"
        }
        releaseConfig {
            keyAlias "note"
            keyPassword "qwertyuiop"
            storeFile file(project.getRootDir().absolutePath+"/key.jks")
            storePassword "qwertyuiop"

        }
    }
    buildTypes {
        debug {
            //在这里添加：
            lintOptions {
                checkReleaseBuilds false
                abortOnError false
            }
            minifyEnabled false  //混淆
            zipAlignEnabled false//内存对齐
            shrinkResources false // 移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debugConfig

        }
        release {
            //在这里添加：
            lintOptions {
                checkReleaseBuilds false
                abortOnError false
            }
            minifyEnabled true  //混淆
            zipAlignEnabled true//内存对齐
            shrinkResources true // 移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig

        }

        //配置自定义打包名称
        applicationVariants.all { variant ->
            variant.outputs.all {
                def fileName
                def date = new Date()
                def formattedDate = date.format('MMddHHmm')

                if (variant.buildType.name.equals('release')) {
                    fileName = "FxNote_V${variant.mergedFlavor.versionName}_${formattedDate}_r.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "FxNote_V${variant.mergedFlavor.versionName}_${formattedDate}_d.apk"
                }
                outputFileName = fileName

            }
        }

    }

}
